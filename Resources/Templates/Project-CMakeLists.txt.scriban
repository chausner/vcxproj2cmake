cmake_minimum_required(VERSION 3.13)
project({{ project_name }} LANGUAGES {{ languages | array.join " " }})

{{~ for project in project_references | order_projects_by_dependencies ~}}
if(NOT TARGET {{ project.project_file_info.project_name }})
    add_subdirectory({{ project.project_file_info.absolute_project_path | get_directory_name | get_relative_path (absolute_project_path | get_directory_name) | normalize_path }} "${CMAKE_BINARY_DIR}/_deps/{{ project.project_file_info.unique_name }}-build")
endif()
{{~ end ~}}

{{~ if qt_modules.size > 0 ~}}
find_package(Qt5 REQUIRED COMPONENTS {{ qt_modules | array.map "cmake_component_name" | array.sort | array.join " " }})
{{~ end -}}
{{~ for package in conan_packages ~}}
find_package({{ package.cmake_config_name }} REQUIRED CONFIG)
{{~ end ~}}

{{~ if configuration_type == "Application" ~}}
add_executable({{ project_name }}
{{~ else if configuration_type == "StaticLibrary" ~}}
add_library({{ project_name }} STATIC
{{~ else if configuration_type == "DynamicLibrary" ~}}
add_library({{ project_name }} SHARED
{{~ else ~}}
{{ fail $"Unsupported configuration type: {configuration_type}" }}
{{~ end ~}}
    {{~ for file in source_files | array.sort ~}}
    {{ file | translate_msbuild_macros | normalize_path }}
    {{~ end ~}}
)

{{~ if requires_moc ~}}
set_target_properties({{ project_name }} PROPERTIES AUTOMOC ON)

{{~ end -}}

{{~ if language_standard ~}}
target_compile_features({{ project_name }} PUBLIC {{ }}
    {{- if language_standard == "stdcpplatest" -}} cxx_std_23
    {{- else if language_standard == "stdcpp20" -}} cxx_std_20
    {{- else if language_standard == "stdcpp17" -}} cxx_std_17
    {{- else if language_standard == "stdcpp14" -}} cxx_std_14
    {{- else if language_standard == "stdcpp11" -}} cxx_std_11
    {{- else -}}
    {{ fail $"Unsupported language standard: {language_standard}" }}
    {{- end -}}
)

{{~ end -}}

{{~ if !include_paths.is_empty ~}}
target_include_directories({{ project_name }} PUBLIC
    {{~ for path in include_paths.common ~}}
    {{ path | translate_msbuild_macros | normalize_path }}
    {{~ end ~}}
    {{~ for path in include_paths.debug ~}}
    $<$<CONFIG:Debug>:{{ path | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
    {{~ for path in include_paths.release ~}}
    $<$<CONFIG:Release>:{{ path | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
    {{~ for path in include_paths.x86 ~}}
    $<$<STREQUAL:$<TARGET_PROPERTY:ARCHITECTURE_ID>,x86>:{{ path | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
    {{~ for path in include_paths.x64 ~}}
    $<$<STREQUAL:$<TARGET_PROPERTY:ARCHITECTURE_ID>,x64>:{{ path | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
)

{{~ end -}}

{{~ if !defines.is_empty ~}}
target_compile_definitions({{ project_name }} PUBLIC
    {{~ for define in defines.common ~}}
    {{ define }}
    {{~ end ~}}
    {{~ for define in defines.debug ~}}
    $<$<CONFIG:Debug>:{{ define }}>
    {{~ end ~}}
    {{~ for define in defines.release ~}}
    $<$<CONFIG:Release>:{{ define }}>
    {{~ end ~}}
    {{~ for define in defines.x86 ~}}
    $<$<STREQUAL:$<TARGET_PROPERTY:ARCHITECTURE_ID>,x86>:{{ define }}>
    {{~ end ~}}
    {{~ for define in defines.x64 ~}}
    $<$<STREQUAL:$<TARGET_PROPERTY:ARCHITECTURE_ID>,x64>:{{ define }}>
    {{~ end ~}}
)

{{~ end -}}

{{~ if !linker_paths.is_empty ~}}
target_link_directories({{ project_name }} PUBLIC
    {{~ for path in linker_paths.common ~}}
    {{ path | translate_msbuild_macros | normalize_path }}
    {{~ end ~}}
    {{~ for path in linker_paths.debug ~}}
    $<$<CONFIG:Debug>:{{ path | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
    {{~ for path in linker_paths.release ~}}
    $<$<CONFIG:Release>:{{ path | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
    {{~ for path in linker_paths.x86 ~}}
    $<$<STREQUAL:$<TARGET_PROPERTY:ARCHITECTURE_ID>,x86>:{{ path | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
    {{~ for path in linker_paths.x64 ~}}
    $<$<STREQUAL:$<TARGET_PROPERTY:ARCHITECTURE_ID>,x64>:{{ path | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
)

{{~ end -}}
{{~
  link_library_dependencies_effective = false
  if link_library_dependencies_enabled
    for project in project_references
      if project.project_file_info.configuration_type == "StaticLibrary" || project.project_file_info.configuration_type == "DynamicLibrary"
        link_library_dependencies_effective = true
        break
      end
    end
  end
~}}
{{~ if !libraries.is_empty || link_library_dependencies_effective || qt_modules.size > 0 || conan_packages.size > 0 ~}}
target_link_libraries({{ project_name }} PUBLIC
    {{~ for library in libraries.common ~}}
    {{ library | translate_msbuild_macros | normalize_path }}
    {{~ end ~}}
    {{~ for library in libraries.debug ~}}
    $<$<CONFIG:Debug>:{{ library | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
    {{~ for library in libraries.release ~}}
    $<$<CONFIG:Release>:{{ library | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
    {{~ for library in libraries.x86 ~}}
    $<$<STREQUAL:$<TARGET_PROPERTY:ARCHITECTURE_ID>,x86>:{{ library | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
    {{~ for library in libraries.x64 ~}}
    $<$<STREQUAL:$<TARGET_PROPERTY:ARCHITECTURE_ID>,x64>:{{ library | translate_msbuild_macros | normalize_path }}>
    {{~ end ~}}
    {{~ if link_library_dependencies_enabled ~}}
    {{~ for project in project_references | order_projects_by_dependencies ~}}
    {{~ if project.project_file_info.configuration_type == "StaticLibrary" || project.project_file_info.configuration_type == "DynamicLibrary" ~}}
    {{ project.project_file_info.project_name }}
    {{~ end ~}}
    {{~ end ~}}
    {{~ end ~}}
    {{~ for qt_cmake_target in qt_modules | array.map "cmake_target_name" | array.sort ~}}
    {{ qt_cmake_target }}
    {{~ end ~}}
    {{~ for conan_cmake_target in conan_packages | array.map "cmake_target_name" | array.sort ~}}
    {{ conan_cmake_target }}
    {{~ end ~}}
)

{{~ end -}}

{{~ if !options.is_empty ~}}
target_compile_options({{ project_name }} PUBLIC
    {{~ for option in options.common ~}}
    {{ option }}
    {{~ end ~}}
    {{~ for option in options.debug ~}}
    $<$<CONFIG:Debug>:{{ option }}>
    {{~ end ~}}
    {{~ for option in options.release ~}}
    $<$<CONFIG:Release>:{{ option }}>
    {{~ end ~}}
    {{~ for option in options.x86 ~}}
    $<$<STREQUAL:$<TARGET_PROPERTY:ARCHITECTURE_ID>,x86>:{{ option }}>
    {{~ end ~}}
    {{~ for option in options.x64 ~}}
    $<$<STREQUAL:$<TARGET_PROPERTY:ARCHITECTURE_ID>,x64>:{{ option }}>
    {{~ end ~}}
)

{{~ end -}}

