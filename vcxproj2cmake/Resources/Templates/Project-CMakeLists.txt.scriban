cmake_minimum_required(VERSION 3.13)
project({{ project_name }}
{{- if languages.size > 0 ~}}
 LANGUAGES {{ languages | array.join " " }}
{{- end -}}
)

{{~ if enable_standalone_project_builds && project_references.size > 0 ~}}
{{~ for project_ref in project_references | order_project_references_by_dependencies ~}}
if(NOT TARGET {{ project_ref.project.project_name }})
    add_subdirectory({{ project_ref.project.absolute_project_path | get_directory_name | get_relative_path (absolute_project_path | get_directory_name) | normalize_path }} "${CMAKE_BINARY_DIR}/{{ project_ref.project.project_name }}")
endif()
{{~ end ~}}

{{~ end -}}

{{~ for find_package in find_packages ~}}
find_package({{ find_package.package_name }}
{{- if find_package.required }} REQUIRED{{ end -}}
{{- if find_package.config }} CONFIG{{ end -}}
{{- if find_package.components != null && find_package.components.size > 0 ~}}
 COMPONENTS {{ find_package.components | array.sort | array.join " " }}
{{- end -}}
)
{{~ end ~}}

{{~ if is_header_only_library ~}}
add_library({{ project_name }} INTERFACE)
{{~ else if configuration_type == "Application" ~}}
add_executable({{ project_name }}{{ if is_win32_executable }} WIN32{{ end }}
{{~ else if configuration_type == "StaticLibrary" ~}}
add_library({{ project_name }} STATIC
{{~ else if configuration_type == "DynamicLibrary" ~}}
add_library({{ project_name }} SHARED
{{~ else ~}}
{{ fail $"Unsupported configuration type: {configuration_type}" }}
{{~ end ~}}
{{~ if !is_header_only_library ~}}
    {{~ for file in source_files | array.sort ~}}
    {{ file | translate_msbuild_macros | normalize_path }}
    {{~ end ~}}
)
{{~ end ~}}

{{~ if properties | array.size > 0 ~}}
set_target_properties({{ project_name }} PROPERTIES
    {{~ for kvp in properties ~}}
    {{ kvp.key }} {{ kvp.value }}
    {{~ end ~}}
)

{{~ end -}}

{{~ if !compile_features.is_empty ~}}
target_compile_features({{ project_name }}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in compile_features.values ~}}
        {{~ for feature in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" feature }}
        {{~ end ~}}  
        {{~ end ~}}
)

{{~ end -}}

{{~ if !precompiled_header_file.is_empty ~}}
target_precompile_headers({{ project_name }}
    PRIVATE
        {{~ for kvp in precompiled_header_file.values ~}}
        {{~ if kvp.value != "" ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" (kvp.value | translate_msbuild_macros | normalize_path | prepend_relative_paths_with_cmake_current_source_dir) }}
        {{~ end ~}}
        {{~ end ~}}
)

{{~ end -}}

{{~ if !public_include_paths.is_empty || !include_paths.is_empty ~}}
target_include_directories({{ project_name }}
{{~ if !public_include_paths.is_empty ~}}
    INTERFACE
        {{~ for kvp in public_include_paths.values ~}}
        {{~ for path in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" (path | translate_msbuild_macros | normalize_path | prepend_relative_paths_with_cmake_current_source_dir) }}
        {{~ end ~}}  
        {{~ end ~}}  
{{~ end ~}}
{{~ if !include_paths.is_empty ~}}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in include_paths.values ~}}
        {{~ for path in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" (path | translate_msbuild_macros | normalize_path | prepend_relative_paths_with_cmake_current_source_dir) }}
        {{~ end ~}}  
        {{~ end ~}}  
{{~ end ~}}
)

{{~ end -}}

{{~ if !defines.is_empty ~}}
target_compile_definitions({{ project_name }}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in defines.values ~}}
        {{~ for define in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" define }}
        {{~ end ~}}
        {{~ end ~}}     
)

{{~ end -}}

{{~ if !linker_paths.is_empty ~}}
target_link_directories({{ project_name }}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in linker_paths.values ~}}
        {{~ for path in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" (path | translate_msbuild_macros | normalize_path) }}
        {{~ end ~}}  
        {{~ end ~}}      
)

{{~ end -}}
{{~ if !libraries.is_empty ~}}
target_link_libraries({{ project_name }}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in libraries.values ~}}
        {{~ for library in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" (library | translate_msbuild_macros | normalize_path) }}
        {{~ end ~}}
        {{~ end ~}}
)

{{~ end -}}

{{~ if !options.is_empty ~}}
target_compile_options({{ project_name }}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in options.values ~}}
        {{~ for option in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" option }}
        {{~ end ~}}
        {{~ end ~}}     
)

{{~ end -}}

