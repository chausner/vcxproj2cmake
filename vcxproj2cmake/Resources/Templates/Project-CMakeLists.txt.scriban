cmake_minimum_required(VERSION 3.13)
project({{ project_name }}
{{- if languages.size > 0 ~}}
 LANGUAGES {{ languages | array.join " " }}
{{- end -}}
)

{{~ if enable_standalone_project_builds && project_references.size > 0 ~}}
{{~ for project in project_references | order_project_references_by_dependencies all_projects ~}}
if(NOT TARGET {{ project.project_info.project_name }})
    add_subdirectory({{ project.project_info.absolute_project_path | get_directory_name | get_relative_path (absolute_project_path | get_directory_name) | normalize_path }} "${CMAKE_BINARY_DIR}/{{ project.project_info.unique_name }}")
endif()
{{~ end ~}}

{{~ end -}}

{{~ if uses_open_mp ~}}
find_package(OpenMP)
{{~ end ~}}
{{~ if qt_modules.size > 0 ~}}
find_package(Qt{{ qt_version }} REQUIRED COMPONENTS {{ qt_modules | array.map "cmake_component_name" | array.sort | array.join " " }})
{{~ end -}}
{{~ for package in conan_packages ~}}
find_package({{ package.cmake_config_name }} REQUIRED CONFIG)
{{~ end ~}}

{{~ if is_header_only_library ~}}
add_library({{ project_name }} INTERFACE)
{{~ else if configuration_type == "Application" ~}}
add_executable({{ project_name }}{{ if linker_subsystem == "Windows" }} WIN32{{ end }}
{{~ else if configuration_type == "StaticLibrary" ~}}
add_library({{ project_name }} STATIC
{{~ else if configuration_type == "DynamicLibrary" ~}}
add_library({{ project_name }} SHARED
{{~ else ~}}
{{ fail $"Unsupported configuration type: {configuration_type}" }}
{{~ end ~}}
{{~ if !is_header_only_library ~}}
    {{~ for file in source_files | array.sort ~}}
    {{ file | translate_msbuild_macros | normalize_path }}
    {{~ end ~}}
)
{{~ end ~}}

{{~ if requires_qt_moc || requires_qt_uic || requires_qt_rcc ~}}
set_target_properties({{ project_name }} PROPERTIES
{{~ if requires_qt_moc ~}}
    AUTOMOC ON
{{~ end ~}}
{{~ if requires_qt_uic ~}}
    AUTOUIC ON
{{~ end ~}}
{{~ if requires_qt_rcc ~}}
    AUTORCC ON
{{~ end ~}}
)

{{~ end -}}

{{~ if cpp_language_standard != null || (clanguage_standard != null && clanguage_standard != "Default") ~}}
target_compile_features({{ project_name }} {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
    {{- if cpp_language_standard -}}
        {{- case cpp_language_standard -}}
        {{- when "stdcpplatest" }} cxx_std_23
        {{- when "stdcpp23" }} cxx_std_23
        {{- when "stdcpp20" }} cxx_std_20
        {{- when "stdcpp17" }} cxx_std_17
        {{- when "stdcpp14" }} cxx_std_14
        {{- when "stdcpp11" }} cxx_std_11
        {{- else -}} {{ fail $"Unsupported C++ language standard: {cpp_language_standard}" }}
        {{- end -}}
    {{- end -}}
    {{- if clanguage_standard -}}
        {{- case clanguage_standard -}}
        {{- when "stdclatest" }} c_std_23
        {{- when "stdc23" }} c_std_23
        {{- when "stdc17" }} c_std_17
        {{- when "stdc11" }} c_std_11
        {{- when "Default" -}}
        {{- else -}} {{ fail $"Unsupported C language standard: {clanguage_standard}" }}
        {{- end -}}
    {{- end -}}
)

{{~ end -}}

{{~ if !precompiled_header_file.is_empty ~}}
target_precompile_headers({{ project_name }}
    PRIVATE
        {{~ for kvp in precompiled_header_file.values ~}}
        {{~ if kvp.value != "" ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" (kvp.value | translate_msbuild_macros | normalize_path | prepend_relative_paths_with_cmake_current_source_dir) }}
        {{~ end ~}}
        {{~ end ~}}
)

{{~ end -}}

{{~ if !public_include_paths.is_empty || !include_paths.is_empty ~}}
target_include_directories({{ project_name }}
{{~ if !public_include_paths.is_empty ~}}
    INTERFACE
        {{~ for kvp in public_include_paths.values ~}}
        {{~ for path in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" (path | translate_msbuild_macros | normalize_path | prepend_relative_paths_with_cmake_current_source_dir) }}
        {{~ end ~}}  
        {{~ end ~}}  
{{~ end ~}}
{{~ if !include_paths.is_empty ~}}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in include_paths.values ~}}
        {{~ for path in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" (path | translate_msbuild_macros | normalize_path | prepend_relative_paths_with_cmake_current_source_dir) }}
        {{~ end ~}}  
        {{~ end ~}}  
{{~ end ~}}
)

{{~ end -}}

{{~ if !defines.is_empty ~}}
target_compile_definitions({{ project_name }}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in defines.values ~}}
        {{~ for define in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" define }}
        {{~ end ~}}
        {{~ end ~}}     
)

{{~ end -}}

{{~ if !linker_paths.is_empty ~}}
target_link_directories({{ project_name }}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in linker_paths.values ~}}
        {{~ for path in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" (path | translate_msbuild_macros | normalize_path) }}
        {{~ end ~}}  
        {{~ end ~}}      
)

{{~ end -}}
{{~
  link_library_dependencies_effective = false
  if link_library_dependencies_enabled
    for project in project_references
      if project.project_info.configuration_type == "StaticLibrary" || project.project_info.configuration_type == "DynamicLibrary"
        link_library_dependencies_effective = true
        break
      end
    end
  end
~}}
{{~ if !libraries.is_empty || link_library_dependencies_effective || qt_modules.size > 0 || conan_packages.size > 0 ~}}
target_link_libraries({{ project_name }}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in libraries.values ~}}
        {{~ for library in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" (library | translate_msbuild_macros | normalize_path) }}
        {{~ end ~}}  
        {{~ end ~}}     
        {{~ if link_library_dependencies_enabled ~}}
        {{~ for project in project_references | order_project_references_by_dependencies all_projects ~}}
        {{~ if project.project_info.configuration_type == "StaticLibrary" || project.project_info.configuration_type == "DynamicLibrary" ~}}
        {{ project.project_info.project_name }}
        {{~ end ~}}
        {{~ end ~}}
        {{~ end ~}}
        {{~ for qt_cmake_target in qt_modules | array.map "cmake_target_name" | array.sort ~}}
        {{ qt_cmake_target }}
        {{~ end ~}}
        {{~ for conan_cmake_target in conan_packages | array.map "cmake_target_name" | array.sort ~}}
        {{ conan_cmake_target }}
        {{~ end ~}}
)

{{~ end -}}

{{~ if !options.is_empty ~}}
target_compile_options({{ project_name }}
    {{ if is_header_only_library }}INTERFACE{{ else }}PUBLIC{{ end }}
        {{~ for kvp in options.values ~}}
        {{~ for option in kvp.value ~}}
        {{ string.replace kvp.key.cmake_expression "{0}" option }}
        {{~ end ~}}
        {{~ end ~}}     
)

{{~ end -}}

